"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.failureProcess = void 0;
const pinus_logger_1 = require("pinus-logger");
let logger = pinus_logger_1.getLogger('pinus-rpc', 'failprocess');
const constants_1 = require("../util/constants");
function failureProcess(code, tracer, serverId, msg, opts) {
    let cb = tracer && tracer.cb;
    let mode = opts.failMode;
    let FAIL_MODE = constants_1.constants.FAIL_MODE;
    let method = failfast;
    if (mode === FAIL_MODE.FAILOVER) {
        method = failover;
    }
    else if (mode === FAIL_MODE.FAILBACK) {
        method = failback;
    }
    else if (mode === FAIL_MODE.FAILFAST) {
    }
    // switch (mode) {
    //     case constants.FAIL_MODE.FAILOVER:
    //         method = failover;
    //         break;
    //     case constants.FAIL_MODE.FAILBACK:
    //         method = failback;
    //         break;
    //     case constants.FAIL_MODE.FAILFAST:
    //         method = failfast;
    //         break;
    //     case constants.FAIL_MODE.FAILSAFE:
    //     default:
    //         method = failfast;
    //         break;
    // }
    method.call(this, code, tracer, serverId, msg, opts, cb);
}
exports.failureProcess = failureProcess;
/**
 * Failover rpc failure process. This will try other servers with option retries.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failover = function (code, tracer, serverId, msg, opts, cb) {
    let servers;
    let self = this;
    let counter = 0;
    let success = true;
    let serverType = msg.serverType;
    if (!tracer || !tracer.servers) {
        servers = self.serversMap[serverType];
    }
    else {
        servers = tracer.servers;
    }
    let index = servers.indexOf(serverId);
    if (index >= 0) {
        servers.splice(index, 1);
    }
    tracer && (tracer.servers = servers);
    if (!servers.length) {
        logger.error('[pinus-rpc] rpc failed with all this type of servers, with serverType: %s', serverType);
        cb(new Error('rpc failed with all this type of servers, with serverType: ' + serverType));
        return;
    }
    self.dispatch.call(self, tracer, servers[0], msg, opts, cb);
};
/**
 * Failsafe rpc failure process.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failsafe = function (code, tracer, serverId, msg, opts, cb) {
    let self = this;
    let retryTimes = opts.retryTimes || constants_1.constants.DEFAULT_PARAM.FAILSAFE_RETRIES;
    let retryConnectTime = opts.retryConnectTime || constants_1.constants.DEFAULT_PARAM.FAILSAFE_CONNECT_TIME;
    if (!tracer.retryTimes) {
        tracer.retryTimes = 1;
    }
    else {
        tracer.retryTimes += 1;
    }
    switch (code) {
        case constants_1.constants.RPC_ERROR.SERVER_NOT_STARTED:
        case constants_1.constants.RPC_ERROR.NO_TRAGET_SERVER:
            cb(new Error('rpc client is not started or cannot find remote server.'));
            break;
        case constants_1.constants.RPC_ERROR.FAIL_CONNECT_SERVER:
            if (tracer.retryTimes <= retryTimes) {
                setTimeout(function () {
                    self.connect(tracer, serverId, cb);
                }, retryConnectTime * tracer.retryTimes);
            }
            else {
                cb(new Error('rpc client failed to connect to remote server: ' + serverId));
            }
            break;
        case constants_1.constants.RPC_ERROR.FAIL_FIND_MAILBOX:
        case constants_1.constants.RPC_ERROR.FAIL_SEND_MESSAGE:
            if (tracer.retryTimes <= retryTimes) {
                setTimeout(function () {
                    self.dispatch.call(self, tracer, serverId, msg, opts, cb);
                }, retryConnectTime * tracer.retryTimes);
            }
            else {
                cb(new Error('rpc client failed to send message to remote server: ' + serverId));
            }
            break;
        case constants_1.constants.RPC_ERROR.FILTER_ERROR:
            cb(new Error('rpc client filter encounters error.'));
            break;
        default:
            cb(new Error('rpc client unknown error.'));
    }
};
/**
 * Failback rpc failure process. This will try the same server with sendInterval option and retries option.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failback = function (code, tracer, serverId, msg, opts, cb) {
    // todo record message in background and send the message at timing
};
/**
 * Failfast rpc failure process. This will ignore error in rpc client.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failfast = function (code, tracer, serverId, msg, opts, cb) {
    logger.error('rpc failed with error, remote server: %s, msg: %j, error code: %s', serverId, msg, code);
    cb && cb(new Error('rpc failed with error code: ' + code));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpbHVyZVByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcnBjLWNsaWVudC9mYWlsdXJlUHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBeUM7QUFDekMsSUFBSSxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDbkQsaURBQThDO0FBRzlDLFNBQWdCLGNBQWMsQ0FBWSxJQUFZLEVBQUUsTUFBVyxFQUFFLFFBQWdCLEVBQUUsR0FBVyxFQUFFLElBQXdCO0lBQ3hILElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQzdCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsSUFBSSxTQUFTLEdBQUcscUJBQVMsQ0FBQyxTQUFTLENBQUM7SUFDcEMsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDO0lBRXRCLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxRQUFRLEVBQUU7UUFDN0IsTUFBTSxHQUFHLFFBQVEsQ0FBQztLQUNyQjtTQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxRQUFRLEVBQUU7UUFDcEMsTUFBTSxHQUFHLFFBQVEsQ0FBQztLQUNyQjtTQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxRQUFRLEVBQUU7S0FFdkM7SUFDRCxrQkFBa0I7SUFDbEIseUNBQXlDO0lBQ3pDLDZCQUE2QjtJQUM3QixpQkFBaUI7SUFDakIseUNBQXlDO0lBQ3pDLDZCQUE2QjtJQUM3QixpQkFBaUI7SUFDakIseUNBQXlDO0lBQ3pDLDZCQUE2QjtJQUM3QixpQkFBaUI7SUFDakIseUNBQXlDO0lBQ3pDLGVBQWU7SUFDZiw2QkFBNkI7SUFDN0IsaUJBQWlCO0lBQ2pCLElBQUk7SUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUE3QkQsd0NBNkJDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxJQUFJLFFBQVEsR0FBRyxVQUFxQixJQUFZLEVBQUUsTUFBeUIsRUFBRSxRQUFnQixFQUFFLEdBQXlCLEVBQUUsSUFBWSxFQUFFLEVBQVk7SUFDaEosSUFBSSxPQUFPLENBQUM7SUFDWixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3pDO1NBQU07UUFDSCxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztLQUM1QjtJQUVELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ1osT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7SUFDRCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBRXJDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsMkVBQTJFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLDZEQUE2RCxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDMUYsT0FBTztLQUNWO0lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7R0FXRztBQUNILElBQUksUUFBUSxHQUFHLFVBQXFCLElBQVksRUFBRSxNQUE0QixFQUFFLFFBQWdCLEVBQUUsR0FBeUIsRUFBRSxJQUEwQixFQUFFLEVBQVk7SUFDakssSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUkscUJBQVMsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7SUFDN0UsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUkscUJBQVMsQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUM7SUFFOUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDcEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7S0FDekI7U0FBTTtRQUNILE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsUUFBUSxJQUFJLEVBQUU7UUFDVixLQUFLLHFCQUFTLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDO1FBQzVDLEtBQUsscUJBQVMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCO1lBQ3JDLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDLENBQUM7WUFDekUsTUFBTTtRQUNWLEtBQUsscUJBQVMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CO1lBQ3hDLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUU7Z0JBQ2pDLFVBQVUsQ0FBQztvQkFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZDLENBQUMsRUFBRSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0gsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLGlEQUFpRCxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDL0U7WUFDRCxNQUFNO1FBQ1YsS0FBSyxxQkFBUyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUMzQyxLQUFLLHFCQUFTLENBQUMsU0FBUyxDQUFDLGlCQUFpQjtZQUN0QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksVUFBVSxFQUFFO2dCQUNqQyxVQUFVLENBQUM7b0JBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDOUQsQ0FBQyxFQUFFLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDSCxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsc0RBQXNELEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUNwRjtZQUNELE1BQU07UUFDVixLQUFLLHFCQUFTLENBQUMsU0FBUyxDQUFDLFlBQVk7WUFDakMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNO1FBQ1Y7WUFDSSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO0tBQ2xEO0FBQ0wsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxJQUFJLFFBQVEsR0FBRyxVQUFVLElBQVksRUFBRSxNQUE0QixFQUFFLFFBQWdCLEVBQUUsR0FBeUIsRUFBRSxJQUEwQixFQUFFLEVBQVk7SUFDdEosbUVBQW1FO0FBQ3ZFLENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsSUFBSSxRQUFRLEdBQUcsVUFBVSxJQUFZLEVBQUUsTUFBNEIsRUFBRSxRQUFnQixFQUFFLEdBQXlCLEVBQUUsSUFBMEIsRUFBRSxFQUFZO0lBQ3RKLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUVBQW1FLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQyxDQUFDIn0=