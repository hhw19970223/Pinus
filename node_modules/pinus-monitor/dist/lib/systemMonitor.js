"use strict";
/**
 * Module dependencies
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSysInfo = void 0;
const os = require("os");
const util = require("../utils/util");
const child_process_1 = require("child_process");
let info = {};
/**
 * get information of operating-system
 *
 * @param  {Function} callback
 * @api public
 */
function getSysInfo(callback) {
    if (process.platform === 'win32')
        return;
    let reData = getBasicInfo();
    child_process_1.exec('iostat ', function (err, output) {
        if (!!err) {
            console.error('getSysInfo failed! ' + err.stack);
            callback(err, reData);
        }
        else {
            reData.iostat = format(output);
            callback(null, reData);
        }
    });
}
exports.getSysInfo = getSysInfo;
/**
 * analysis the disk i/o data,return a map contains kb_read,kb_wrtn ect.
 *
 * @param {String} data, the output of the command 'iostat'
 * @api private
 */
function format(data) {
    let time = util.formatTime(new Date());
    let output_array = data.toString().replace(/^\s+|\s+$/g, '').split(/\s+/);
    let output_values = [];
    for (let i = 0, counter = 0; i < output_array.length; i++) {
        if (!isNaN(output_array[i])) {
            output_values[counter] = parseFloat(output_array[i]);
            counter++;
        }
    }
    if (output_values.length > 0) {
        let output_hash = {
            date: time,
            disk: {
                kb_read: output_values[9],
                kb_wrtn: output_values[10],
                kb_read_per: output_values[7],
                kb_wrtn_per: output_values[8],
                tps: output_values[6]
            },
            cpu: {
                cpu_user: output_values[0],
                cpu_nice: output_values[1],
                cpu_system: output_values[2],
                cpu_iowait: output_values[3],
                cpu_steal: output_values[4],
                cpu_idle: output_values[5]
            }
        };
        return output_hash;
    }
}
/**
 * get basic information of operating-system
 *
 * @return {Object} result
 * @api private
 */
function getBasicInfo() {
    let result = {};
    for (let key in info) {
        result[key] = info[key]();
    }
    return result;
}
info.hostname = os.hostname;
info.type = os.type;
info.platform = os.platform;
info.arch = os.arch;
info.release = os.release;
info.uptime = os.uptime;
info.loadavg = os.loadavg;
info.totalmem = os.totalmem;
info.freemem = os.freemem;
info.cpus = os.cpus;
info.networkInterfaces = os.networkInterfaces;
info.versions = function () { return process.versions; };
info.arch = function () { return process.arch; };
info.platform = function () { return process.platform; };
info.memoryUsage = process.memoryUsage;
info.uptime = process.uptime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtTW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zeXN0ZW1Nb25pdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7O0FBRUgseUJBQXlCO0FBQ3pCLHNDQUFzQztBQUN0QyxpREFBcUM7QUFFckMsSUFBSSxJQUFJLEdBQVEsRUFBRSxDQUFDO0FBRW5COzs7OztHQUtHO0FBRUgsU0FBZ0IsVUFBVSxDQUFDLFFBQWtCO0lBQ3pDLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPO1FBQUUsT0FBTztJQUN6QyxJQUFJLE1BQU0sR0FBUSxZQUFZLEVBQUUsQ0FBQztJQUNqQyxvQkFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRSxNQUFNO1FBQ2pDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9CLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDMUI7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFaRCxnQ0FZQztBQUVEOzs7OztHQUtHO0FBRUgsU0FBUyxNQUFNLENBQUMsSUFBWTtJQUN4QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2QyxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lB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