"use strict";
/*!
 * Pinus -- consoleModule runScript
 * Copyright(c) 2012 fantasyni <fantasyni@163.com>
 * MIT Licensed
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptsModule = void 0;
const pinus_logger_1 = require("pinus-logger");
const vm = require("vm");
const fs = require("fs");
const util = require("util");
const path = require("path");
let logger = pinus_logger_1.getLogger('pinus-admin', path.basename(__filename));
class ScriptsModule {
    constructor(opts) {
        this.app = opts.app;
        this.root = opts.path;
        this.commands = {
            'list': list,
            'get': get,
            'save': save,
            'run': run
        };
    }
    monitorHandler(agent, msg, cb) {
        let context = {
            app: this.app,
            require: require,
            os: require('os'),
            fs: require('fs'),
            process: process,
            util: util,
            result: undefined
        };
        try {
            vm.createContext(context);
            vm.runInNewContext(msg.script, context);
            let result = context.result;
            if (!result) {
                cb(null, 'script result should be assigned to result value to script module context');
            }
            else {
                cb(null, result);
            }
        }
        catch (e) {
            cb(null, e.toString());
        }
        // cb(null, vm.runInContext(msg.script, context));
    }
    clientHandler(agent, msg, cb) {
        let fun = this.commands[msg.command];
        if (!fun || typeof fun !== 'function') {
            cb('unknown command:' + msg.command);
            return;
        }
        fun(this, agent, msg, cb);
    }
}
exports.ScriptsModule = ScriptsModule;
ScriptsModule.moduleId = 'scripts';
/**
 * List server id and scripts file name
 */
let list = function (scriptModule, agent, msg, cb) {
    let servers = [];
    let scripts = [];
    let idMap = agent.idMap;
    for (let sid in idMap) {
        servers.push(sid);
    }
    fs.readdir(scriptModule.root, function (err, filenames) {
        if (err) {
            filenames = [];
        }
        for (let i = 0, l = filenames.length; i < l; i++) {
            scripts.push(filenames[i]);
        }
        cb(null, {
            servers: servers,
            scripts: scripts
        });
    });
};
/**
 * Get the content of the script file
 */
let get = function (scriptModule, agent, msg, cb) {
    let filename = msg.filename;
    if (!filename) {
        cb('empty filename');
        return;
    }
    fs.readFile(path.join(scriptModule.root, filename), 'utf-8', function (err, data) {
        if (err) {
            logger.error('fail to read script file:' + filename + ', ' + err.stack);
            cb('fail to read script with name:' + filename);
        }
        cb(null, data);
    });
};
/**
 * Save a script file that posted from admin console
 */
let save = function (scriptModule, agent, msg, cb) {
    let filepath = path.join(scriptModule.root, msg.filename);
    fs.writeFile(filepath, msg.body, function (err) {
        if (err) {
            logger.error('fail to write script file:' + msg.filename + ', ' + err.stack);
            cb('fail to write script file:' + msg.filename);
            return;
        }
        cb();
    });
};
/**
 * Run the script on the specified server
 */
let run = function (scriptModule, agent, msg, cb) {
    agent.request(msg.serverId, ScriptsModule.moduleId, msg, function (err, res) {
        if (err) {
            logger.error('fail to run script for ' + err.stack);
            return;
        }
        cb(null, res);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2R1bGVzL3NjcmlwdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQUVILCtDQUF5QztBQUV6Qyx5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFJN0IsSUFBSSxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBRWpFLE1BQWEsYUFBYTtJQU90QixZQUFZLElBQWtDO1FBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNaLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsSUFBSTtZQUNaLEtBQUssRUFBRSxHQUFHO1NBQ2IsQ0FBQztJQUNOLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBbUIsRUFBRSxHQUFRLEVBQUUsRUFBbUI7UUFDN0QsSUFBSSxPQUFPLEdBQUc7WUFDVixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixPQUFPLEVBQUUsT0FBTztZQUNoQixFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNqQixFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNqQixPQUFPLEVBQUUsT0FBTztZQUNoQixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxTQUFnQjtTQUMzQixDQUFDO1FBQ0YsSUFBSTtZQUNBLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFD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